# Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2021-Present Datadog, Inc.

stages:
  - build
  - test
  - deploy

variables:
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: ddprof
  # Cache of the valid images to start build steps faster : https://gitlab.ddbuild.io/DataDog/ddprof/-/jobs/87754200
  BUILD_IMG_16_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:13d5530fc3f1f0152f55f9fd7f57d96c47e3be844d9fe4940cb75a4be20e3cb5
  BUILD_IMG_18_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:e7822ca4ac39ecbb469713d2f7698be86dfd2caa6a3f75f411b1f1c107385f42
  BUILD_IMG_20_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:6a3ccd4154fd8795cb18eb4dff3e4dbb80f5990b0362051ef21f1ce605b1e1d7
  # https://gitlab.ddbuild.io/DataDog/ddprof/-/pipelines/5611418
  TEST_IMG_16_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:a06908a49fbdf93fb62e7c5a650ec6da587c21f8f5060cf0657d4b08a63df985
  TEST_IMG_18_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:128fff36c0cc5a8d9f31d8082fbcdde7fe8cad960514f01a1a11b209ef94d08b
  TEST_IMG_20_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:04c624f448361a67a8899cf141d0ebaed0e8e55a4276fed765c5459453a5145c
  # When build images are built, publish them with following tags
  BASE_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:base
  BUILD_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:build
  TEST_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:test
  # bare centos image
  CENTOS_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:centos
  # Libc configuration
  # Everything seems to be 2.27 or above in Datadog (feel free to prove me wrong)
  DDOG_LIBC: "2.27"
  LIBC_TYPE: "glibc"
  # Deployment paths
  S3_PREFIX: s3://binaries.ddbuild.io/ddprof/release
  RELPATH: ddprof/release
  BINPATH: deliverables
  S3ROOT: ddprof
  DOWNSTREAM_BRANCH:
    value: "master"
    description: "Run a specific datadog-reliability-env branch downstream"
  FORCE_TRIGGER:
    value: "true"
    description: "ensure a deployment in reliability environment regardless of rules (usually branch)"


# This is the base repo (apt, system configuration, etc)
build:base:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  parallel:
    matrix:
      - UB_VERSION: ["16", "18", "20"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - export TAG_DOCKER=${BASE_IMG}_${UB_VERSION}
    - docker pull $TAG_DOCKER || true
    - docker build --tag $TAG_DOCKER  --build-arg UBUNTU_VERSION=${UB_VERSION} -f ./app/base-env/Dockerfile .
    - docker push $TAG_DOCKER

# This is a cache of compile-time dependencies, like elfutils and libddprof.
# This needs to be updated whenever these dependencies change and it matters,
build:deps:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  parallel:
    matrix:
      - UB_VERSION: ["16", "18", "20"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - export TAG_DOCKER=${BUILD_IMG}_${UB_VERSION}
    - docker build --tag ${TAG_DOCKER} --build-arg CI=${CI} --build-arg BASE_IMAGE=${BASE_IMG}_${UB_VERSION} -f app/build-env/Dockerfile .
    - docker push ${TAG_DOCKER}

# This is a cache of compile-time dependencies, test image
build:testing:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  parallel:
    matrix:
      - UB_VERSION: ["16", "18", "20"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - export TAG_DOCKER=${TEST_IMG}_${UB_VERSION}
    - docker build --tag $TAG_DOCKER --build-arg UBUNTU_VERSION=${UB_VERSION} -f app/test-env/Dockerfile .
    - docker push $TAG_DOCKER

# This is a cache of compile-time dependencies, test image
build:centos:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker build --tag $CENTOS_IMG -f app/centos/Dockerfile .
    - docker push $CENTOS_IMG

.light-job-resource-allocation:
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_CPU_LIMIT: 2
    KUBERNETES_MEMORY_REQUEST: 4Gi
    KUBERNETES_MEMORY_LIMIT: 4Gi

build:ddprof:
  extends:
    - .light-job-resource-allocation
  stage: build
  tags: ["runner:k8s"]
  # refers to image defined in matrix
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ["${BUILD_IMG_16_STICKY}", "${BUILD_IMG_18_STICKY}", "${BUILD_IMG_20_STICKY}"]
        BUILD_TYPE: ["Release", "Debug", "SanitizedDebug", "Coverage"]
  variables:
    BUILDPATH: build_${BUILD_TYPE}
  script:
    - set -euxo pipefail
    - source setup_env.sh
    - export LIBC_VERSION=`ldd --version | head -n 1 | awk '{print $NF}'`
    - export DELIVERY_PATH="${CI_PROJECT_DIR}/${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/"
    #Build image dependencies were stored in app, avoid rebuilding vendor content
    - ln -s /app/vendor vendor
    - mkdir -p ${BUILDPATH} && cd ${BUILDPATH}
    - cmake -DCMAKE_INSTALL_PREFIX=${DELIVERY_PATH} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_BENCHMARKS=ON -DACCURACY_TEST=ON -DBUILD_NATIVE_LIB=ON -DBUILD_REV=${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} ..
    # Static checks
    - make cppcheck
    - make format
    - make -j ${KUBERNETES_CPU_LIMIT}
    - if [ ! $(./ddprof --version | sed 's/.*+//g') == "${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}" ]; then exit 1; fi
    - ctest --repeat-until-fail 5 --output-on-failure | tee test-output.log
    - if [ ${BUILD_TYPE} == "Release" ]; then strip --strip-debug ddprof; fi
    - make install
    - if [ ${BUILD_TYPE} == "Coverage" ]; then
    - make ctest_coverage
    - export CODECOV_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.ddprof.codecov-token --with-decryption --query "Parameter.Value" --out text)
    - ${CI_PROJECT_DIR}/tools/codecov.sh -Z
    - fi
      # This job gives useful info on the mmap/mlock/perfopen capabilities in CI / different user
    - cd test && RunDDBuild ./mmap-ut
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/${BINPATH}/
    expire_in: 1 week

.heavy-duty-job-resource-allocation: &heavy-duty-job-resource-allocation
  variables:
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_REQUEST: 10Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi

# Static analysis with codeql
build:codeql:
  when: manual
  extends:
    - .heavy-duty-job-resource-allocation
  stage: build
  tags: ["runner:k8s"]
  # refers to image defined in matrix
  image: $BUILD_IMG_20_STICKY
  script:
    - set -euxo pipefail
        #Build image dependencies were stored in app, avoid rebuilding vendor content
    - ln -s /app/vendor vendor
    - ./tools/run_codeql.sh
  artifacts:
      paths:
        - "cpp-security-quality.sarif"

test:ddprof:
  extends:
    - .light-job-resource-allocation
  image: $IMAGE
  stage: test
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - IMAGE: ["${TEST_IMG_16_STICKY}", "${TEST_IMG_18_STICKY}", "${TEST_IMG_20_STICKY}"]
        BUILD_TYPE: ["Release", "SanitizedDebug"]
  script:
    - set -euxo pipefail
    - source setup_env.sh
    # Test with the matching libc version
    - export LIBC_VERSION=`ldd --version | head -n 1 | awk '{print $NF}'`
    - export BINDIR="./${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/bin"
    - export RUST_BACKTRACE=1
    - echo "CHECK USER" && id
    - echo "CHECK SETTING ON PERF EVENT PARANOID" && cat /proc/sys/kernel/perf_event_paranoid
    - echo "CHECK SETTING ON PINNED MEMORY" && ulimit -l
    - echo "CHECK SETTING on PERF EVEN OPEN" && cat /proc/sys/kernel/perf_event_mlock_kb
    - echo ""
    - if [ ${BUILD_TYPE} == "Release" ]; then 
    - check_dependencies.sh ${BINDIR}/ddprof test/data/expected_deps_${LIBC_TYPE}_${LIBC_VERSION}_${BUILD_TYPE}.txt
    - fi
    # Print help (checks that we have the correct help associated to params)
    - ${BINDIR}/ddprof -h
    # Record perf only for release and more recent libc versions (perfs are bad on libc 23)
    - if (( `echo $LIBC_VERSION| awk -F '.' '{print $2}'` > 27 )) && [ ${BUILD_TYPE} == "Release" ]; then
    - export RECORD_OPTION="-r"
    - else 
    - export RECORD_OPTION="" # no recording
    - fi
    # Run toy project for 5 seconds
    - mkdir pprofs && export DDPROF_PPROFS_FOLDER="$PWD/pprofs"
    - run.sh -b ${BINDIR} -f test/configs/perfanalysis.yml BadBoggleSolver_run 5 &> ddprof_log && cat ddprof_log && check_log_errors.sh ddprof_log
    - unset DDPROF_PPROFS_FOLDER
    # symbol cache validation mechanism
    - export DDPROF_CACHE_SETTING=VALIDATE; run.sh -f test/configs/perfanalysis.yml BadBoggleSolver_run 20 &> ddprof_log && check_log_errors.sh ddprof_log; unset DDPROF_CACHE_SETTING
    # Run the BadBoggleSolver_run as a benchmark
    - native_bench.sh ${RECORD_OPTION} -b ${BINDIR}
    - native_bench.sh ${RECORD_OPTION} -b ${BINDIR} -e sleep.sh
    # Accuracy check for unwinding (only if it was built)
    - if [ -e  ${BINDIR}/selfuw ]; then
    - ${BINDIR}/selfuw ${CI_PROJECT_DIR}/test/self_unwind/data
    - fi
    # Valgrind with suppressions (check valgrind_suppressions_release.supp)
    - if [ ${BUILD_TYPE} == "Release" ]; then 
    - run.sh --valgrind -b ${BINDIR} -f test/configs/perfanalysis.yml BadBoggleSolver_run 5
    - fi
  dependencies:
    - build:ddprof

test:centos:
  extends:
    - .light-job-resource-allocation
  image: $CENTOS_IMG
  stage: test
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - BUILD_TYPE: ["Release"]
  script:
    - set -euxo pipefail
    - source setup_env.sh
    # Centos 8 runs on 2.28, we build 2.27
    - export LIBC_VERSION=${DDOG_LIBC}
    - export BINDIR="./${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/bin"
    # Check libc version
    - ldd --version
    - run.sh -f test/configs/perfanalysis.yml -b ${BINDIR} ${BINDIR}/collatz 1 20000 5000 A
  dependencies:
    - build:ddprof

.ddprof_job:
  variables:
    BINNAME: ddprof
    RELEASEBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_20_STICKY

# Standard deployment job : automatically promotes main version
deploy:ddprof:
  extends: .ddprof_job
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:docker"]
  script:
    - set -euo pipefail
    - if [ $CI_COMMIT_BRANCH = "main" ];then export PROMOTE=MAIN;fi
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

# Promotion job : candidate version (the version we want to promote to stable)
promote_candidate:ddprof:
  extends: .ddprof_job
  when: manual
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:docker"]
  script:
    - set -euo pipefail
    - export PROMOTE=CANDIDATE
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

# Promotion job : updates the base version of ddprof
promote_major:ddprof:
  extends: .ddprof_job
  when: manual
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:docker"]
  script:
    - set -euo pipefail
    - export PROMOTE=MAJOR
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

# Trigger downstream event on relenv
deploy_to_reliability_env:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: manual
  trigger:
    project: DataDog/datadog-reliability-env
    branch: $DOWNSTREAM_BRANCH
  variables:
    UPSTREAM_PACKAGE_JOB: build
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA
    FORCE_TRIGGER: $FORCE_TRIGGER

.collatz_job:
  variables:
    BINNAME: collatz
    RELEASEBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_20_STICKY

deploy:collatz:
  extends: .collatz_job
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:k8s"]
  script:
    - set -euxo pipefail
    - if [ $CI_COMMIT_BRANCH = "main" ];then export PROMOTE=MAJOR;fi
    - tools/ci_upload.sh
