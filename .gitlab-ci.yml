stages:
  - build
  - test
  - deploy

variables:
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: ddprof
  # Cache of the valid images to start build steps faster : https://gitlab.ddbuild.io/DataDog/ddprof/-/jobs/87754200
  BUILD_IMG_20_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:7260f245813f624c6f81661b38e44df80173a88f66cf40a6815bb0ddc0545ca8
  BUILD_IMG_18_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:b024312d4462e461658d85ff199b058b14c8ff163eee67ce575ebbe3b2fe31d5
  BUILD_IMG_16_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:a35324470b3ff8c6f00b18fca58137b2513c3e3e6531601739042e341c98c60f
  # https://gitlab.ddbuild.io/DataDog/ddprof/-/jobs/81425357
  TEST_IMG_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:1565b429f9266dc10f98d615fcaf06941a1281292467820961364aff1376ef34
  # When build images are built, publish them with following tags
  BASE_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:base
  BUILD_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:build
  TEST_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:test
  # bare centos image
  CENTOS_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:centos
  # Libc configuration
  # Everything seems to be 2.27 or above in Datadog (feel free to prove me wrong)
  DDOG_LIBC: "2.27"
  LIBC_TYPE: "glibc"
  # Deployment paths
  S3_PREFIX: s3://binaries.ddbuild.io/ddprof/release
  RELPATH: ddprof/release
  BINPATH: deliverables
  S3ROOT: ddprof

# This is the base repo (apt, system configuration, etc)
build:base:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  parallel:
    matrix:
      - UB_VERSION: ["16", "18", "20"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - export TAG_DOCKER=${BASE_IMG}_${UB_VERSION}
    - docker pull $TAG_DOCKER || true
    - docker build --tag $TAG_DOCKER  --build-arg UBUNTU_VERSION=${UB_VERSION} -f ./app/base-env/Dockerfile .
    - docker push $TAG_DOCKER

# This is a cache of compile-time dependencies, like elfutils and libddprof.
# This needs to be updated whenever these dependencies change and it matters,
build:deps:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  parallel:
    matrix:
      - UB_VERSION: ["16", "18", "20"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - export TAG_DOCKER=${BUILD_IMG}_${UB_VERSION}
    - docker build --tag ${TAG_DOCKER} --build-arg CI=${CI} --build-arg BASE_IMAGE=${BASE_IMG}_${UB_VERSION} -f app/build-env/Dockerfile .
    - docker push ${TAG_DOCKER}

# This is a cache of compile-time dependencies, test image
build:testing:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker build --tag $TEST_IMG -f app/test-env/Dockerfile .
    - docker push $TEST_IMG

# This is a cache of compile-time dependencies, test image
build:centos:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker build --tag $CENTOS_IMG -f app/centos/Dockerfile .
    - docker push $CENTOS_IMG

.light-job-resource-allocation:
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_CPU_LIMIT: 2
    KUBERNETES_MEMORY_REQUEST: 4Gi
    KUBERNETES_MEMORY_LIMIT: 4Gi

build:ddprof:
  extends:
    - .light-job-resource-allocation
  stage: build
  tags: ["runner:k8s"]
  # refers to image defined in matrix
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ["${BUILD_IMG_18_STICKY}", "${BUILD_IMG_20_STICKY}"]
        BUILD_TYPE: ["Release", "Debug", "SanitizedDebug", "Coverage"]
  variables:
    BUILDPATH: build_${BUILD_TYPE}
  script:
    - set -euxo pipefail
    - source setup_env.sh
    - export LIBC_VERSION=`ldd --version | head -n 1 | awk '{print $NF}'`
    - export DELIVERY_PATH="${CI_PROJECT_DIR}/${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/"
    # Accuracy test : Self unwind is c++17 (todo: backport to c++14). following line checks that we are over 2.30
    - if (( `echo $LIBC_VERSION| awk -F '.' '{print $2}'` > 30 )); then
    - export ACCURACY_TEST=ON
    - else
    - export ACCURACY_TEST=OFF
    - fi
    #Build image dependencies were stored in app, avoid rebuilding vendor content
    - ln -s /app/vendor vendor
    - mkdir -p ${BUILDPATH} && cd ${BUILDPATH}
    - cmake -DCMAKE_INSTALL_PREFIX=${DELIVERY_PATH} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_BENCHMARKS=ON -DACCURACY_TEST=${ACCURACY_TEST} -DBUILD_NATIVE_LIB=ON -DBUILD_REV=${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} ..
    # Static checks
    - make cppcheck
    - make format
    - make -j ${KUBERNETES_CPU_LIMIT}
    - if [ ! $(./ddprof --version | sed 's/.*+//g') == "${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}" ]; then exit 1; fi
    - apt-get install -y strace
    - strace -f -v -s 2500 ctest --repeat-until-fail 5 --output-on-failure | tee test-output.log
    - make install
    - if [ ${BUILD_TYPE} == "Coverage" ]; then
    - make ctest_coverage
    - export CODECOV_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.ddprof.codecov-token --with-decryption --query "Parameter.Value" --out text)
    - ${CI_PROJECT_DIR}/tools/codecov.sh -Z
    - fi
      # This job gives useful info on the mmap/mlock/perfopen capabilities in CI / different user
    - cd test && RunDDBuild ./mmap-ut
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/${BINPATH}/
    expire_in: 1 week

test:ddprof:
  extends:
    - .light-job-resource-allocation
  image: $TEST_IMG_STICKY
  stage: test
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - BUILD_TYPE: ["Release", "SanitizedDebug"]
  script:
    - set -euxo pipefail
    - source setup_env.sh
    - export LIBC_VERSION=`ldd --version | head -n 1 | awk '{print $NF}'`
    - export BINDIR="./${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/bin"
    - echo "CHECK USER" && id
    - echo "CHECK SETTING ON PERF EVENT PARANOID" && cat /proc/sys/kernel/perf_event_paranoid
    - echo "CHECK SETTING ON PINNED MEMORY" && ulimit -l
    - echo "CHECK SETTING on PERF EVEN OPEN" && cat /proc/sys/kernel/perf_event_mlock_kb
    - echo ""
    - check_dependencies.sh ${BINDIR}/ddprof test/data/expected_deps_${BUILD_TYPE}.txt
    # Print help (checks that we have the correct help associated to params)
    - ${BINDIR}/ddprof -h
    # Run toy project for 5 seconds
    - mkdir pprofs && export DDPROF_PPROFS_FOLDER="$PWD/pprofs"
    - run.sh -b ${BINDIR} BadBoggleSolver_run 5
    - ls ${DDPROF_PPROFS_FOLDER} # todo : add a check on pprofs
    - unset DDPROF_PPROFS_FOLDER
    - if [ ${BUILD_TYPE} == "Release" ]; then # record only in release mode
    - native_bench.sh -r -b ${BINDIR}
    - else
    - native_bench.sh -b ${BINDIR}
    - fi
    # Accuracy check for unwinding (only if it was built)
    - if [ -e  ${BINDIR}/selfuw ]; then
    - ${BINDIR}/selfuw ${CI_PROJECT_DIR}/test/self_unwind/data
    - fi
  dependencies:
    - build:ddprof

test:centos:
  extends:
    - .light-job-resource-allocation
  image: $CENTOS_IMG
  stage: test
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - BUILD_TYPE: ["Release"]
  script:
    - set -euxo pipefail
    - source setup_env.sh
    # Centos 8 runs on 2.28, though we only build 2.27
    - export LIBC_VERSION=${DDOG_LIBC}
    - export BINDIR="./${BINPATH}/${LIBC_TYPE}/${LIBC_VERSION}/${BUILD_TYPE}/bin"
    # Check libc version
    - ldd --version
    - run.sh -b ${BINDIR} ${BINDIR}/collatz 1 20000 5000 A
  dependencies:
    - build:ddprof

.ddprof_job:
  variables:
    BINNAME: ddprof
    RELEASEBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_20_STICKY

deploy:ddprof:
  extends: .ddprof_job
  when: always
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:docker"]
  script:
    - set -euo pipefail
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

promote:ddprof:
  extends: .ddprof_job
  when: manual
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:docker"]
  script:
    - set -euo pipefail
    - export PROMOTE=YES
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

.collatz_job:
  variables:
    BINNAME: collatz
    RELEASEBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/${LIBC_TYPE}/${DDOG_LIBC}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_20_STICKY

deploy:collatz:
  extends: .collatz_job
  image: $BUILD_IMG_20_STICKY
  stage: deploy
  tags: ["runner:k8s"]
  script:
    - set -euxo pipefail
    - if [ $CI_COMMIT_BRANCH = "main" ];then PROMOTE=MAJOR;fi
    - tools/ci_upload.sh
