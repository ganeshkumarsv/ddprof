stages:
  - build
  - test
  - deploy

variables:
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: ddprof
  # Cache of the valid images to start build steps faster : https://gitlab.ddbuild.io/DataDog/ddprof/-/jobs/83432904
  BUILD_IMG_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:760a194491c1eb31f30891e625a87c802b447a9d7328408b7e3bf66da010842d
  # https://gitlab.ddbuild.io/DataDog/ddprof/-/jobs/81425357
  TEST_IMG_STICKY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof@sha256:1565b429f9266dc10f98d615fcaf06941a1281292467820961364aff1376ef34
  # When build images are built, publish them with following tags
  BASE_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:base
  BUILD_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:build
  TEST_IMG: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/ddprof:test
  # Deployment paths
  S3_PREFIX: s3://binaries.ddbuild.io/ddprof/release
  RELPATH: ddprof/release
  BINPATH: deliverables
  S3ROOT: ddprof

# This is the base repo (apt, system configuration, etc)
build:base:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker pull $BASE_IMG || true
    - docker build --tag $BASE_IMG app/base-env
    - docker push $BASE_IMG

# This is a cache of compile-time dependencies, like elfutils and libddprof.
# This needs to be updated whenever these dependencies change and it matters,
build:deps:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker build --tag $BUILD_IMG --build-arg CI=${CI} -f app/build-env/Dockerfile .
    - docker push $BUILD_IMG

# This is a cache of compile-time dependencies, test image
build:testing:
  stage: build
  when: manual
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - set -euo pipefail
    - docker build --tag $TEST_IMG --build-arg CI=${CI} -f app/test-env/Dockerfile .
    - docker push $TEST_IMG

.light-job-resource-allocation:
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_CPU_LIMIT: 2
    KUBERNETES_MEMORY_REQUEST: 4Gi
    KUBERNETES_MEMORY_LIMIT: 4Gi

build:ddprof:
  extends:
    - .light-job-resource-allocation
  image: $BUILD_IMG_STICKY
  stage: build
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - BUILD_TYPE: ["Release", "Debug", "SanitizedDebug", "Coverage"]
  variables:
    BUILDPATH: build_${BUILD_TYPE}
  script:
    - set -euxo pipefail
    - source setup_env.sh
    - export DELIVERY_PATH="${CI_PROJECT_DIR}/${BINPATH}/${BUILD_TYPE}"
    #Build image dependencies were stored in app, avoid rebuilding vendor content
    - ln -s /app/vendor vendor
    - mkdir -p ${BUILDPATH} && cd ${BUILDPATH}
    - cmake -DCMAKE_INSTALL_PREFIX=${DELIVERY_PATH} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_BENCHMARKS=ON -DBUILD_REV=${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} ..
    # Static checks
    - make cppcheck
    - make format
    - make -j ${KUBERNETES_CPU_LIMIT}
    - if [ ! $(./ddprof --version | sed 's/.*+//g') == "${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}" ]; then exit 1; fi
    - ctest --repeat-until-fail 5 --output-on-failure | tee test-output.log
    - make install
    - if [ ${BUILD_TYPE} == "Coverage" ]; then
    - make ctest_coverage
    - export CODECOV_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.ddprof.codecov-token --with-decryption --query "Parameter.Value" --out text)
    - ${CI_PROJECT_DIR}/tools/codecov.sh -Z
    - fi
      # This job gives useful info on the mmap/mlock/perfopen capabilities in CI / different user
    - cd test && RunDDBuild ./mmap-ut
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/${BINPATH}/
    expire_in: 1 week

test:ddprof:
  extends:
    - .light-job-resource-allocation
  image: $TEST_IMG_STICKY
  stage: test
  tags: ["runner:k8s"]
  parallel:
    matrix:
      - BUILD_TYPE: ["Release", "SanitizedDebug"]
  script:
    - set -euxo pipefail
    - source setup_env.sh
    # Add a key to export metrics and profiles
    - echo "CHECK USER" && id
    - echo "CHECK SETTING ON PERF EVENT PARANOID" && cat /proc/sys/kernel/perf_event_paranoid
    - echo "CHECK SETTING ON PINNED MEMORY" && ulimit -l
    - echo "CHECK SETTING on PERF EVEN OPEN" && cat /proc/sys/kernel/perf_event_mlock_kb
    - echo ""
    - check_dependencies.sh ${BINPATH}/${BUILD_TYPE}/bin/ddprof test/data/expected_deps_${BUILD_TYPE}.txt
    # Run toy project for 5 seconds
    - mkdir pprofs && export DDPROF_PPROFS_FOLDER="$PWD/pprofs"
    - run.sh -b ./${BINPATH}/${BUILD_TYPE}/bin BadBoggleSolver_run 5
    - ls ${DDPROF_PPROFS_FOLDER} # todo : add a check on pprofs
    - unset DDPROF_PPROFS_FOLDER
    - if [ ${BUILD_TYPE} == "Release" ]; then # record only in release mode
    - native_bench.sh -r -b ./${BINPATH}/${BUILD_TYPE}/bin
    - else
    - native_bench.sh -b ./${BINPATH}/${BUILD_TYPE}/bin
    - fi
  dependencies:
    - build:ddprof

.ddprof_job:
  variables:
    BINNAME: ddprof
    RELEASEBIN: ${BINPATH}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_STICKY

deploy:ddprof:
  extends: .ddprof_job
  when: always
  image: $BUILD_IMG_STICKY
  stage: deploy
  tags: ["runner:k8s"]
  script:
    - set -euo pipefail
    - if [ $CI_COMMIT_BRANCH = "main" ];then PROMOTE=MAJOR;fi
    - tools/ci_upload.sh
  dependencies:
    - build:ddprof

.collatz_job:
  variables:
    BINNAME: collatz
    RELEASEBIN: ${BINPATH}/Release/bin/$BINNAME
    DEBUGBIN: ${BINPATH}/Debug/bin/$BINNAME
    GIT_SUBMODULE_STRATEGY: recursive
    PROMOTE: NONE
  image: $BUILD_IMG_STICKY

deploy:collatz:
  extends: .collatz_job
  image: $BUILD_IMG_STICKY
  stage: deploy
  tags: ["runner:k8s"]
  script:
    - set -euxo pipefail
    - if [ $CI_COMMIT_BRANCH = "main" ];then PROMOTE=MAJOR;fi
    - tools/ci_upload.sh
